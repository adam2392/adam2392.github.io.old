<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adam Li's blog - Coding</title><link href="/" rel="alternate"></link><link href="/feeds/coding.atom.xml" rel="self"></link><id>/</id><updated>2018-06-17T00:00:00-04:00</updated><entry><title>Setting Up Docker</title><link href="/blog/2018/06/setup-docker/" rel="alternate"></link><published>2018-06-17T00:00:00-04:00</published><updated>2018-06-17T00:00:00-04:00</updated><author><name>Adam Li</name></author><id>tag:None,2018-06-17:/blog/2018/06/setup-docker/</id><summary type="html">&lt;p&gt;A short walkthrough of setting up Docker and some notes on setting up a containerized approach to development with persistent database.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Setup on Using Docker&lt;/h1&gt;
&lt;h1&gt;By: Adam Li&lt;/h1&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;!-- MarkdownTOC autolink="true" --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-hardware-requirements"&gt;Setting Hardware Requirements:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-docker"&gt;Using Docker&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-docker-image"&gt;1. Docker Image&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1a-setting-base-docker-volume"&gt;1a. Setting Base Docker Volume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1b-creating-the-container"&gt;1b. Creating The Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1c-running-postgresql-via-container"&gt;1c. Running PostgreSQL via Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1d-optional-expose-docker-container-to-host"&gt;1d. (Optional) Expose Docker Container To Host&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;2.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#linking-all-this-with-docker-compose"&gt;Linking All This With Docker-Compose&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;1.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#common-commands"&gt;Common Commands&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#images"&gt;Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#containers"&gt;Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#volumes"&gt;Volumes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-1"&gt;1.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-1"&gt;2.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;The following packages need to be installed for a test time environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;brew update&lt;/span&gt;
&lt;span class="err"&gt;brew prune&lt;/span&gt;
&lt;span class="err"&gt;brew doctor&lt;/span&gt;
&lt;span class="err"&gt;brew install postgres&lt;/span&gt;
&lt;span class="err"&gt;brew install docker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Setting Hardware Requirements:&lt;/h1&gt;
&lt;p&gt;Some packages need minimum hardware requirements assigned to Docker usage.&lt;/p&gt;
&lt;p&gt;A minimum of 4GB RAM assigned to Docker&lt;/p&gt;
&lt;p&gt;Elasticsearch alone needs at least 2GB of RAM to run.&lt;/p&gt;
&lt;p&gt;With Docker for Mac, the amount of RAM dedicated to Docker can be set using the UI: see How to increase docker-machine memory Mac (Stack Overflow).&lt;/p&gt;
&lt;h1&gt;Using Docker&lt;/h1&gt;
&lt;h2&gt;1. Docker Image&lt;/h2&gt;
&lt;p&gt;Most docker images have been prebuilt and tested online. Containers are these dynamic "images" of your system that will host data, programs, etc. Images are snapshots of those containers (mainly at the beginning) to setup the baseline container. &lt;/p&gt;
&lt;p&gt;Volumes are a way of allowing containers persistent storage across usage.&lt;/p&gt;
&lt;h3&gt;1a. Setting Base Docker Volume&lt;/h3&gt;
&lt;p&gt;This will create a docker with a volume (in the docker image) at the volume you specify with the "-v" tag. The docker image has the name that you set, and then it is based off of "busybox", which is a generalized light-weight docker image by Docker.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker create -v /var/lib/postgresql/data --name postgres10.4-data busybox&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;1b. Creating The Container&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker run --name local-postgres10.4 -e POSTGRES_PASSWORD=dappstore -d --volumes-from postgres10.4-data postgres:10.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;1c. Running PostgreSQL via Container&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker run -it --link local-postgres10.4:postgres --rm postgres:10.4 sh -c &amp;#39;exec psql -h &amp;quot;$POSTGRES_PORT_5432_TCP_ADDR&amp;quot; -p &amp;quot;$POSTGRES_PORT_5432_TCP_PORT&amp;quot; -U postgres&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enter the password you just set.&lt;/p&gt;
&lt;p&gt;Inside, you can modify and begin the basic configuration of the base container volume by creating tables and initializing roles using SQL.&lt;/p&gt;
&lt;p&gt;Now, your base container is set up! Don't remove this if you want to have persistant Postgresql set up.&lt;/p&gt;
&lt;h3&gt;1d. (Optional) Expose Docker Container To Host&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker run --name local-postgres10.4 -p 5432:5432 -e POSTGRES_PASSWORD=asecurepassword -d --volumes-from postgres10.4-data postgres:10.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will expose the PostGRESQL docker instance via port 5432 localhost, so that you can connect to it via any application now.&lt;/p&gt;
&lt;h2&gt;2.&lt;/h2&gt;
&lt;h1&gt;Linking All This With Docker-Compose&lt;/h1&gt;
&lt;p&gt;Docker-compose is a way of composing up the docker images that you have in a way that fits your needs. You can modularly stack docker images and then run additional installations that fit your specifications.&lt;/p&gt;
&lt;p&gt;So, for example, here we will compose a docker image that is composed of django, postgres and elasticsearch to have a fully functional web-app with logging capabilities. (Perhaps we should also think about adding Kibana and Logstash for a full ELK stack)?&lt;/p&gt;
&lt;h2&gt;1.&lt;/h2&gt;
&lt;p&gt;Refer to https://medium.com/@leo_hetsch/local-development-with-go-postgresql-and-elasticsearch-in-docker-61bc8a0d5e66 for a nice little explanation for some common docker installation commands for postgresql and elastic search.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker-compose -f local.yml build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;export COMPOSE_FILE=local.yml&lt;/span&gt;
&lt;span class="err"&gt;docker-compose up&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Possible / common methods:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker-compose -f local.yml run --rm django python manage.py migrate&lt;/span&gt;
&lt;span class="err"&gt;docker-compose -f local.yml run --rm django python manage.py createsuperuser&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since docker is composed of a set of build commands, you should read up on the documentation here:&lt;/p&gt;
&lt;p&gt;https://docs.docker.com/compose/compose-file/#resources&lt;/p&gt;
&lt;h1&gt;Common Commands&lt;/h1&gt;
&lt;h2&gt;Images&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;
&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;

&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;rmi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;image_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Containers&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;docker container ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Volumes&lt;/h2&gt;
&lt;h1&gt;Testing&lt;/h1&gt;
&lt;h2&gt;1.&lt;/h2&gt;
&lt;h2&gt;2.&lt;/h2&gt;
&lt;h1&gt;References:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;http://boot2docker.io/&lt;/li&gt;
&lt;li&gt;https://ryaneschinger.com/blog/dockerized-postgresql-development-environment/&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Coding"></category><category term="webdev"></category><category term="docker"></category><category term="macos"></category></entry><entry><title>Setting Up ERC Standard Tokens</title><link href="/blog/2018/06/setup-erc-token/" rel="alternate"></link><published>2018-06-10T00:00:00-04:00</published><updated>2018-06-10T00:00:00-04:00</updated><author><name>Adam Li</name></author><id>tag:None,2018-06-10:/blog/2018/06/setup-erc-token/</id><summary type="html">&lt;p&gt;A short walkthrough of setting up an ethereum token.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Setup with Ethereum&lt;/h1&gt;
&lt;h1&gt;By: Adam Li&lt;/h1&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;!-- MarkdownTOC --&gt;

&lt;ul&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Set Up&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Creating Your Project Directory&lt;/li&gt;
&lt;li&gt;1b. Project Directory&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Contracts and FrontEnd&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation&lt;ul&gt;
&lt;li&gt;ERC Standards&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;ERC20&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;ERC721&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Remix (http://remix.ethereum.org/)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Ropsten Test Network (https://ropsten.etherscan.io )&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Javascript Truffle Tests&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Metamask and Ganache&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;truffle.js (http://truffleframework.com/docs/advanced/configuration)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Crowdsalable Ethereum Token&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;References:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;pragma solidity ^0.4.18;
web3@1.0.0-beta.27
truffle@4.0.4 
solc@0.4.19 
ethereumjs-testrpc@6.0.3 &lt;/p&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;The following packages need to be installed for a test time environment:
* testrpc
* web3js
* solc
* truffle&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;npm install ethereumjs-testrpc web3&lt;/span&gt;
&lt;span class="err"&gt;npm install solc&lt;/span&gt;
&lt;span class="err"&gt;npm install -g truffle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Testrpc is an in-memory blockchain that can be used to test the development of the application.&lt;/li&gt;
&lt;li&gt;Web3 is essentially the web interface with the backend and frontend.&lt;/li&gt;
&lt;li&gt;Solc is a solidity code compiler&lt;/li&gt;
&lt;li&gt;Truffle is a web framework for building dAPPs using Ethereum&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Set Up&lt;/h1&gt;
&lt;h2&gt;1. Creating Your Project Directory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;mkdir MyToken &amp;amp;&amp;amp; cd MyToken&lt;/span&gt;
&lt;span class="err"&gt;truffle init&lt;/span&gt;
&lt;span class="err"&gt;npm init -y&lt;/span&gt;
&lt;span class="err"&gt;npm install -E zeppelin-solidity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will install zeppelin-solidity for testing code and initialize your project directory using truffle.s&lt;/p&gt;
&lt;h3&gt;1b. Project Directory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;contracts: this is your directory for any solidity contracts&lt;/li&gt;
&lt;li&gt;migrations: this is your directory for scriptable deployment files (how do we want to release the functionality of our entire project?)&lt;/li&gt;
&lt;li&gt;test: for testing your entire application&lt;/li&gt;
&lt;li&gt;truffle.js: a configuration file for truffle&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Contracts and FrontEnd&lt;/h2&gt;
&lt;p&gt;Next, you need to implement your contracts and frontend to create your unique token(s).&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;h2&gt;ERC Standards&lt;/h2&gt;
&lt;h3&gt;1. ERC20&lt;/h3&gt;
&lt;p&gt;Requirements for it are:
- The Token’s Name
- The Token’s Symbol
- The Token’s Decimal Places
- The Number of Tokens in Circulation
- balanceOf 
- allowance
- approve 
- transferFrom&lt;/p&gt;
&lt;p&gt;It also defines two events: Transfer and Approval .&lt;/p&gt;
&lt;h3&gt;2. ERC721&lt;/h3&gt;
&lt;p&gt;These are tokens that are non-fungible. One token does not necessarily equal another. It is slightly more complicated then the erc20 token.&lt;/p&gt;
&lt;p&gt;The standard defines the functions:
- name 
- symbol 
- totalSupply 
- balanceOf 
- ownerOf 
- approve 
- takeOwnership 
- transfer 
- tokenOfOwnerByIndex
- tokenMetadata &lt;/p&gt;
&lt;p&gt;It also defines two events: Transfer and Approval .&lt;/p&gt;
&lt;h1&gt;Testing&lt;/h1&gt;
&lt;h2&gt;1. Remix (http://remix.ethereum.org/)&lt;/h2&gt;
&lt;p&gt;You can test using a web tool (solidity online compiler), hosted by the Ethereum foundation: http://remix.ethereum.org/.&lt;/p&gt;
&lt;p&gt;You can easily test contract functionality, but beware you can't test your whole dapp functionality, so there could be bugs in synchronizing the front/back end with the contracts.&lt;/p&gt;
&lt;h2&gt;2. Ropsten Test Network (https://ropsten.etherscan.io )&lt;/h2&gt;
&lt;p&gt;Using remix, or another tool to deploy your contract, you can check basic outputs here on the test network.&lt;/p&gt;
&lt;h2&gt;3. Javascript Truffle Tests&lt;/h2&gt;
&lt;p&gt;These will be customized test suites that you write in the truffle directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;npm i ethereumjs-tx&lt;/span&gt;
&lt;span class="err"&gt;truffle develop&lt;/span&gt;
&lt;span class="err"&gt;truffle(develop)&amp;gt; test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command will install the ethereum-tx package, boot a test blockchain using truffle and then run all tests within "/test/" directory.&lt;/p&gt;
&lt;h2&gt;4. Metamask and Ganache&lt;/h2&gt;
&lt;p&gt;This is a blockchain utility web app that can run in your web2.0 browser. It can help debug your entire dapp.&lt;/p&gt;
&lt;p&gt;Ganache is a personal Ethereum development network that runs on your computer.  Using Ganache you can quickly see how your application affects the blockchain, and introspect details like your accounts, balances, contract creations and gas costs. &lt;/p&gt;
&lt;h1&gt;Deployment&lt;/h1&gt;
&lt;h2&gt;1. truffle.js (http://truffleframework.com/docs/advanced/configuration)&lt;/h2&gt;
&lt;p&gt;Inside your truffle.js file, you'll find the line module.exports. You can modify the contents of this json object, to manage your deployment testing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;networks: Specifies which networks are available for deployment during migrations, as well as specific transaction parameters when interacting with each network (such as gas price, from address, etc.). &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: development, test, ropste, live, etc.&lt;/li&gt;
&lt;li&gt;(options): gas, gasPrice, from, provider&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;providers: Specifies the local test network. Make sure you wrap truffle-hdwallet providers in a function closure as shown below to ensure that only one network is ever connected at a time.&lt;/p&gt;
&lt;p&gt;networks: {
  ropsten: {
    provider: function() {
      return new HDWalletProvider(mnemonic, "https://ropsten.infura.io/");
    },
    network_id: '3',
  },
  test: {
    provider: function() {
      return new HDWalletProvider(mnemonic, "http://127.0.0.1:8545/");
    },
    network_id: '*',
  },
}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;contracts_build_directory: for where to build the contracts into byte code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;mocha: configuration options for mochajs testing framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create an ethereum mnemonic and set it, so your providers can see it within the config file. Here is an example of &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;truffle migrate --network ropsten&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2. Crowdsalable Ethereum Token&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;mkdir crowdsalable-eth-token &amp;amp;&amp;amp; cd crowdsalable-eth-token&lt;/span&gt;
&lt;span class="err"&gt;truffle unbox git@github.com:ajb413/crowdsalable-eth-token.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;References:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://medium.com/@ConsenSys/a-101-noob-intro-to-programming-smart-contracts-on-ethereum-695d15c1dab4&lt;/li&gt;
&lt;li&gt;https://medium.com/@mvmurthy/full-stack-hello-world-voting-ethereum-dapp-tutorial-part-1-40d2d0d807c2&lt;/li&gt;
&lt;li&gt;http://truffleframework.com/docs/getting_started/project#exploring-the-project&lt;/li&gt;
&lt;li&gt;https://www.pubnub.com/blog/testing-and-deploying-an-ethereum-token-part-2/&lt;/li&gt;
&lt;/ol&gt;</content><category term="Coding"></category><category term="webdev"></category><category term="ethereum"></category><category term="javascript"></category><category term="blockchain"></category></entry><entry><title>Setting Up Singularity Containers</title><link href="/blog/2018/01/setup-singularity/" rel="alternate"></link><published>2018-01-31T00:00:00-05:00</published><updated>2018-01-31T00:00:00-05:00</updated><author><name>Adam Li</name></author><id>tag:None,2018-01-31:/blog/2018/01/setup-singularity/</id><summary type="html">&lt;p&gt;A short walkthrough of setting up the Singularity containers&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Setup with Singularity&lt;/h1&gt;
&lt;h1&gt;By: Adam Li&lt;/h1&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;!-- MarkdownTOC autolink="true" --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-a-tensorflow-container-recipe-example"&gt;Setting Up A Tensorflow Container Recipe (Example):&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1-needed-docker-containers"&gt;1. Needed Docker Containers:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-environment--setup"&gt;2. Environment / Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-post"&gt;3. Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-run-script"&gt;4. Run Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-test"&gt;5. Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#common-commands"&gt;Common Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;To install singularity locally with root privelages, you can then build up containers that can be hosted online.&lt;/p&gt;
&lt;h1&gt;Setting Up A Tensorflow Container Recipe (Example):&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nl"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;
&lt;span class="nl"&gt;From&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tensorflow&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;tensorflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gpu&lt;/span&gt;
&lt;span class="nf"&gt;%environment&lt;/span&gt;
  &lt;span class="cp"&gt;# use bash as default shell&lt;/span&gt;
  &lt;span class="n"&gt;SHELL&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="n"&gt;SHELL&lt;/span&gt;
&lt;span class="nf"&gt;%setup&lt;/span&gt;
  &lt;span class="cp"&gt;# runs on host - the path to the image is $SINGULARITY_ROOTFS&lt;/span&gt;
&lt;span class="nf"&gt;%post&lt;/span&gt;
  &lt;span class="cp"&gt;# post-setup script&lt;/span&gt;
  &lt;span class="cp"&gt;# load environment variables&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;
  &lt;span class="cp"&gt;# use bash as default shell&lt;/span&gt;
  &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;SHELL&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;
  &lt;span class="cp"&gt;# make environment file executable&lt;/span&gt;
  &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;
  &lt;span class="cp"&gt;# default mount paths&lt;/span&gt;
  &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scratch&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; 
  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;extra&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
  &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;locales&lt;/span&gt;
  &lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="n"&gt;en_US&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;
  &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
  &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;libcupti&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
  &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
  &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;
  &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt; &lt;span class="n"&gt;scipy&lt;/span&gt; &lt;span class="n"&gt;scikit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;learn&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt; &lt;span class="n"&gt;tensorboard&lt;/span&gt; &lt;span class="n"&gt;natsorted&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;
&lt;span class="nf"&gt;%runscript&lt;/span&gt;
  &lt;span class="cp"&gt;# executes with the singularity run command&lt;/span&gt;
  &lt;span class="cp"&gt;# delete this section to use existing docker ENTRYPOINT command&lt;/span&gt;
&lt;span class="nf"&gt;%test&lt;/span&gt;
  &lt;span class="cp"&gt;# test that script is a success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;1. Needed Docker Containers:&lt;/h2&gt;
&lt;p&gt;The best thing to do is start off with a docker container that is already prebuilt. The nice thing is that for cloud computing with tensorflow-gpu, tensorflow is maintained on docker and up to date. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt;
&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tensorflow&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tensorflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gpu&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other options are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;shub&lt;/span&gt;
&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2. Environment / Setup&lt;/h2&gt;
&lt;p&gt;These are commands that can be used to export variables into the environment. Then you can run setup of files/variables before running any installations.&lt;/p&gt;
&lt;h2&gt;3. Post&lt;/h2&gt;
&lt;p&gt;This is the main area where your image will install different packages and load different environment variables.&lt;/p&gt;
&lt;h2&gt;4. Run Script&lt;/h2&gt;
&lt;p&gt;This will run a script afterwards, say a scientific experiment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;python3 main.py --args&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;5. Test&lt;/h2&gt;
&lt;p&gt;This will run test scripts to see that your "main.py" did what it was supposed to do. Were files saved? Were computations correct?&lt;/p&gt;
&lt;h1&gt;Common Commands&lt;/h1&gt;
&lt;p&gt;Pulling images, shelling into the image and executing the image with a script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;singularity&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt;

&lt;span class="n"&gt;singularity&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;

&lt;span class="n"&gt;singularity&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Common argument flags:
* verbose mode(s): -v, -vv, -vvv
* debug mode: -d 
* link nvidia driver &amp;amp; GPU: --nv
* binds an existing directory onto the image: -B&lt;/p&gt;
&lt;p&gt;An example use case that runs a tensorflow simg and runs a training script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;singularity exec --nv ./tensorflow.simg python main.py &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;traindatadir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;testdatadir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; --output_data_dir &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;outputdatadir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; --log_data_dir &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;logdatadir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; --patient_to_loo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;patient&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; --expname &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;expname&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;This allows an end-to-end HPC/scientific computation analysis that uses Docker/Singularityhub to setup your system, and then runs setup, main scripts and testing to create a consistent output.&lt;/p&gt;
&lt;h1&gt;References:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.singularity-hub.org/&lt;/li&gt;
&lt;li&gt;http://geekyap.blogspot.com/2016/11/docker-vs-singularity-vs-shifter-in-hpc.html&lt;/li&gt;
&lt;li&gt;https://singularity.lbl.gov/docs-docker&lt;/li&gt;
&lt;/ol&gt;</content><category term="Coding"></category><category term="cloud"></category><category term="singularity"></category><category term="python"></category><category term="hpc"></category><category term="tensorflow"></category><category term="deep-learning"></category></entry><entry><title>Setting Up a Pelican Site</title><link href="/blog/2017/06/setup-pelican-site/" rel="alternate"></link><published>2017-06-04T00:00:00-04:00</published><updated>2017-06-04T00:00:00-04:00</updated><author><name>Adam Li</name></author><id>tag:None,2017-06-04:/blog/2017/06/setup-pelican-site/</id><summary type="html">&lt;p&gt;A short walkthrough of setting up a pelican site&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Setup with Pelican Site&lt;/h1&gt;
&lt;h1&gt;By: Adam Li&lt;/h1&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;!-- MarkdownTOC autolink="True" --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#installation"&gt;Installation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-condapip-install"&gt;1. Conda/Pip Install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-start-up-pelican"&gt;2. Start up pelican:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-installing-common-pelican-themes-and-pelican-plugins"&gt;3. Installing common pelican-themes and pelican-plugins:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#choosing-your-hosting-server"&gt;Choosing Your Hosting Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-and-choosing-themesplugins"&gt;Installing and Choosing Themes/Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pushing-content-to-cloud"&gt;Pushing Content to Cloud&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-via-fab-old"&gt;1. Via Fab (Old)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-via-git-directly"&gt;2. Via Git Directly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-pages-of-static-content"&gt;Adding Pages of Static Content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-articles-to-your-blog"&gt;Adding Articles To Your Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-gallery--images-to-your-blog"&gt;Adding Gallery / Images To Your Blog&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#modifying-pelican-templates"&gt;Modifying Pelican Templates:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;h1&gt;Installation&lt;/h1&gt;
&lt;h2&gt;1. Conda/Pip Install&lt;/h2&gt;
&lt;p&gt;After getting your virtualenv setup, run 'pip install pelican'. Also include additional packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pip install Markdown beautifulsoup4 typogrify Pillow webassets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;conda create -n website python=python3&lt;/span&gt;
&lt;span class="err"&gt;conda install -c conda-forge pelican&lt;/span&gt;
&lt;span class="err"&gt;conda install -c conda-forge pyaml &lt;/span&gt;
&lt;span class="err"&gt;conda install -c anaconda markdown&lt;/span&gt;
&lt;span class="err"&gt;conda install -c anaconda beautifulsoup4 &lt;/span&gt;
&lt;span class="err"&gt;conda install -c conda-forge pillow&lt;/span&gt;
&lt;span class="err"&gt;conda install -c conda-forge gettext &lt;/span&gt;
&lt;span class="err"&gt;conda install -c damianavila82 piexif # for&lt;/span&gt;
&lt;span class="err"&gt;pip install pyexif&lt;/span&gt;
&lt;span class="err"&gt;conda install -c conda-forge ghp-import&lt;/span&gt;
&lt;span class="err"&gt;conda install -c anaconda pil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;for helping to write in Markdown and writing pretty text.&lt;/p&gt;
&lt;h2&gt;2. Start up pelican:&lt;/h2&gt;
&lt;p&gt;First you will need to create a separate branch that you work on. This branch contains your actual markdown files, which are rendered and then copied OVER to your master branch during the Publishing section. This then renders html using git.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;git checkout - &amp;lt;source_branch&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;pelican-quickstart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then go through the directions and create your project.&lt;/p&gt;
&lt;h2&gt;3. Installing common pelican-themes and pelican-plugins:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;git clone --recursive https://github.com/getpelican/pelican-themes&lt;/span&gt;
&lt;span class="err"&gt;git clone --recursive https://github.com/getpelican/pelican-plugins&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Choosing Your Hosting Server&lt;/h1&gt;
&lt;p&gt;There are a couple of options, but you should decide how you want to host your site because then it will be built into your pelican project directory.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Github Pages: This is the free and most convenient way to do things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S3 by Amazon: Costs money.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heroku, PythonAnywhere, and More: &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Installing and Choosing Themes/Plugins&lt;/h1&gt;
&lt;p&gt;You need to install the pelican themes and the pelican plugins, if you want to use the open source themes and plugins developed. Then you can add code to your python files to add certain plugins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;PLUGIN_PATHS = [&amp;#39;path/to/pelican-plugins&amp;#39;]&lt;/span&gt;
&lt;span class="err"&gt;PLUGINS = [&amp;#39;assets&amp;#39;, &amp;#39;sitemap&amp;#39;, &amp;#39;gravatar&amp;#39;]&lt;/span&gt;
&lt;span class="err"&gt;JINJA_ENVIRONMENT = {&amp;#39;extensions&amp;#39;: [&amp;#39;jinja2.ext.i18n&amp;#39;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Pushing Content to Cloud&lt;/h1&gt;
&lt;h2&gt;1. Via Fab (Old)&lt;/h2&gt;
&lt;p&gt;'pip install ghp-import fabric'&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using ghp-import:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First run install by 'pip install ghp-import'&lt;/p&gt;
&lt;p&gt;Then you can run code like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commit message&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Using fab:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First install fabric by running 'pip install fabric'. Then insert code into your fabfile.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publishghp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#builds publishconf.py&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git add -A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#will commit allll files, be careful&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git commit -m &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ghp-import -m &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; -b master output&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git push --all&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ fab publishghp:&lt;span class="s2"&gt;&amp;quot;commit message&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to create commits up to the cloud.&lt;/p&gt;
&lt;h2&gt;2. Via Git Directly&lt;/h2&gt;
&lt;p&gt;Before doing anything, check locally if files look right:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;make html &amp;amp;&amp;amp; make serve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First just push all your stuff to your path.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;git add -A &amp;amp;&amp;amp; git commit -a -m &amp;#39;first commit&amp;#39; &amp;amp;&amp;amp; git push --all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;make github&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Adding Pages of Static Content&lt;/h1&gt;
&lt;p&gt;Here you want to add a homepage, about me page and other static pages that are relevant to your site. Create a directory inside /content/pages/ to hold your static pages. Separate blog content and other content and use pelicanconf.py along w/ plugins to play around with the visuals and presentation of the site.&lt;/p&gt;
&lt;h1&gt;Adding Articles To Your Blog&lt;/h1&gt;
&lt;p&gt;To add articles to your blog, create /content/blog/ directory and create subdirectories in there. For example, I have academic, coding, and travel as my subdirectories in my blog. Then adjust your pelicanconf.py file for these blog posts.&lt;/p&gt;
&lt;h1&gt;Adding Gallery / Images To Your Blog&lt;/h1&gt;
&lt;p&gt;Adding images to your blog require the following packages:
- exeif
- Pillow
- Knowledge of modifying Pelican templates&lt;/p&gt;
&lt;h2&gt;Modifying Pelican Templates:&lt;/h2&gt;
&lt;p&gt;https://kwkelly.com/blog/adding-galleries-to-pelican-and-bootstrap/
http://duncanlock.net/blog/2013/05/29/better-figures-images-plugin-for-pelican/&lt;/p&gt;
&lt;h1&gt;References:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://www.notionsandnotes.org/tech/web-development/pelican-static-blog-setup.html&lt;/li&gt;
&lt;li&gt;http://terriyu.info/blog/posts/2013/07/pelican-setup/&lt;/li&gt;
&lt;li&gt;http://beneathdata.com/how-to/how-i-built-this-website/&lt;/li&gt;
&lt;li&gt;Pelican-plugins: https://github.com/getpelican/pelican-plugins&lt;/li&gt;
&lt;li&gt;Pelican-themes: https://github.com/getpelican/pelican-themes&lt;/li&gt;
&lt;li&gt;Walkthru of Pelican w/ Python3.7: https://rsip22.github.io/blog/create-a-blog-with-pelican-and-github-pages.html&lt;/li&gt;
&lt;/ol&gt;</content><category term="Coding"></category><category term="pelican"></category><category term="publishing"></category><category term="webdev"></category><category term="python"></category></entry><entry><title>Setting Up a Virtual Environment for Python</title><link href="/blog/2017/06/setup-virtual-env/" rel="alternate"></link><published>2017-06-04T00:00:00-04:00</published><updated>2017-06-04T00:00:00-04:00</updated><author><name>Adam Li</name></author><id>tag:None,2017-06-04:/blog/2017/06/setup-virtual-env/</id><summary type="html">&lt;p&gt;A short walkthrough of setting up a virtual environment for Python development.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Getting Setup with Virtual Environment for Python Development&lt;/h1&gt;
&lt;h1&gt;By: Adam Li&lt;/h1&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;!-- MarkdownTOC autolink="true" bracket="round" --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing"&gt;Installing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basics-create-delete"&gt;Basics (Create, Delete):&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-create"&gt;1. Create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-delete-a-virtualenv"&gt;2. Delete a Virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;Tips&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-starting-up-your-venv"&gt;1. Starting up your Venv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-requirementstxt"&gt;2. Requirements.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#convenient-tools"&gt;Convenient Tools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-automatically-cd-to-project-directory"&gt;1. Automatically cd To Project Directory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /MarkdownTOC --&gt;

&lt;p&gt;VirtualEnv: 15.1.0
VirtualEnvWrapper&lt;/p&gt;
&lt;p&gt;A virtual environment is useful for development in Python because it keeps your packages for certain projects separate from each other. It'll keep everything for that project separated in a separate wrapper.&lt;/p&gt;
&lt;h1&gt;Installing&lt;/h1&gt;
&lt;p&gt;For virtualenvironment, follow https://virtualenv.pypa.io/en/stable/installation/&lt;/p&gt;
&lt;p&gt;For virtualenvwrapper, follow http://virtualenvwrapper.readthedocs.io/en/latest/install.html&lt;/p&gt;
&lt;h1&gt;Basics (Create, Delete):&lt;/h1&gt;
&lt;h2&gt;1. Create&lt;/h2&gt;
&lt;p&gt;For Virtualenvwrapper: Run the command &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;#39;mkvirtualenv &amp;lt;envname&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For Virtualenv: Run command &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;virtualenv &amp;#39;./venv/&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;inside your project directory. or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;mkvirtualenv -p python3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;virtualenv -p python3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to make the virtual environment with a specific python installation (e.g. 2.7, or 3.4). With python3.6 and most of the recent versions, the virtualenvironment is built in, so you can just run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;python3 -m venv &amp;lt;name_of_venv&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is great because it handles it for you.&lt;/p&gt;
&lt;h2&gt;2. Delete a Virtualenv&lt;/h2&gt;
&lt;p&gt;For Virtualenvwrappper: In order to delete a virtual environment, all you need to do is to remove it recursively from your ~/.virtualenvs directory with    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;#39;sudo rm -rf &amp;lt;name&amp;gt;&amp;#39;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For Virtualenv: Go to the directory of your project and delete the /venv/ directory.&lt;/p&gt;
&lt;h1&gt;Tips&lt;/h1&gt;
&lt;h2&gt;1. Starting up your Venv&lt;/h2&gt;
&lt;p&gt;Startup your virtual environment by typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;workon name_of_virtualenvironment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;2. Requirements.txt&lt;/h2&gt;
&lt;p&gt;This is a convenient file for you to make that keeps track of all your packages. If you ever want to run your project on a new computer, you just create a new virtual environment and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To create the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pip freeze &amp;gt; requirements.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Convenient Tools&lt;/h1&gt;
&lt;h2&gt;1. Automatically cd To Project Directory&lt;/h2&gt;
&lt;p&gt;Input the following code to your ./virtualenvs/postactivate file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    # subtract strings to get the project name
    function get_project_name() {
        local venv_dir=&lt;span class="nv"&gt;$VIRTUALENVWRAPPER_HOOK_DIR&lt;/span&gt;
        local venv=&lt;span class="nv"&gt;$VIRTUAL_ENV&lt;/span&gt;

        temp_project_name=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="c1"&gt;#&amp;quot;$venv_dir&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;   # get difference between two strings
        project_name=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;temp_project_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;     # remove leading &amp;#39;/&amp;#39; character

        echo &lt;span class="nv"&gt;$project_name&lt;/span&gt;
        ## uncomment for debugging
        # echo &lt;span class="nv"&gt;$venv_dir&lt;/span&gt;
        # echo &lt;span class="nv"&gt;$venv&lt;/span&gt;
        # echo &lt;span class="nv"&gt;$temp_project_name&lt;/span&gt;
        # echo &lt;span class="nv"&gt;$project_name&lt;/span&gt;
    }

    # export proj=&amp;quot;cd ~/Documents/$(get_project_name)&amp;quot;
    root_dir=&amp;#39;/Users/adam2392/Documents/&amp;#39;
    project_dir=$(get_project_name)
    cd &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;root_dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;project_dir&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure you change 'root_dir' to the correct root directory of your projects. &lt;/p&gt;
&lt;p&gt;This assumes that your project directory files are all correspondingly named with your virtualenv. This is convenient for changing directory into your project directory automatically.&lt;/p&gt;
&lt;h1&gt;References:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;https://nolar.info/automatically-activate-virtualenv-on-cd/&lt;/li&gt;
&lt;li&gt;code to input into .bashrc&lt;/li&gt;
&lt;/ol&gt;</content><category term="Coding"></category><category term="virtualenv"></category><category term="webdev"></category><category term="python"></category></entry></feed>